import { createSchema } from './baseSchema';
import type {
  ConsumoRegistro,
  ProduccionRegistro,
  LitrosCremaRegistro,
  PerdidaRegistro,
  SobranteRegistro,
} from '../types';
import { generateOperacionId } from '../utils/id';

export const consumoSchema = createSchema<ConsumoRegistro>({
  name: 'Consumos',
  fields: [
    { key: 'producto', label: 'Producto', type: 'string', required: true, minLength: 2 },
    { key: 'insumo', label: 'Insumo', type: 'string', required: true },
    { key: 'cantidad', label: 'Cantidad', type: 'number', required: true, min: 0 },
    { key: 'unidad', label: 'Unidad', type: 'string', required: true, minLength: 1, maxLength: 10 },
    { key: 'tipoProd', label: 'Tipo de producto', type: 'string' },
    { key: 'fecha', label: 'Fecha', type: 'date', required: true },
    { key: 'calculationDate', label: 'Fecha de cálculo', type: 'date' },
  ],
  transform: (record) => ({
    id: String(record.id ?? generateOperacionId('consumo')),
    producto: String(record.producto ?? ''),
    insumo: String(record.insumo ?? ''),
    cantidad: Number(record.cantidad ?? 0),
    unidad: String(record.unidad ?? ''),
    tipoProd: record.tipoProd ? String(record.tipoProd) : undefined,
    fecha: String(record.fecha ?? ''),
    calculationDate: record.calculationDate ? String(record.calculationDate) : String(record.fecha ?? ''),
    responsable: record.responsable ? String(record.responsable) : undefined,
    centro: record.centro ? String(record.centro) : undefined,
    createdBy: record.createdBy ? String(record.createdBy) : undefined,
    createdAt: record.createdAt ? String(record.createdAt) : new Date().toISOString(),
    updatedBy: record.updatedBy ? String(record.updatedBy) : undefined,
    updatedAt: record.updatedAt ? String(record.updatedAt) : undefined,
    source: (record.source as ConsumoRegistro['source']) ?? (record.accessId ? 'import' : 'manual'),
    syncStatus: (record.syncStatus as ConsumoRegistro['syncStatus']) ?? 'synced',
    lastImportedAt: record.lastImportedAt ? String(record.lastImportedAt) : undefined,
    accessId: record.accessId ? String(record.accessId) : undefined,
  }),
});

export const produccionSchema = createSchema<ProduccionRegistro>({
  name: 'Producciones',
  fields: [
    { key: 'producto', label: 'Producto', type: 'string', required: true },
    { key: 'cantidad', label: 'Cantidad', type: 'number', required: true, min: 0 },
    { key: 'centro', label: 'Centro', type: 'string', required: true },
    { key: 'etapa', label: 'Etapa', type: 'string', required: true },
    { key: 'fecha', label: 'Fecha', type: 'date', required: true },
    { key: 'calculationDate', label: 'Fecha de cálculo', type: 'date' },
  ],
  transform: (record) => ({
    id: String(record.id ?? generateOperacionId('produccion')),
    producto: String(record.producto ?? ''),
    cantidad: Number(record.cantidad ?? 0),
    centro: String(record.centro ?? ''),
    etapa: String(record.etapa ?? ''),
    fecha: String(record.fecha ?? ''),
    calculationDate: record.calculationDate ? String(record.calculationDate) : String(record.fecha ?? ''),
    responsable: record.responsable ? String(record.responsable) : undefined,
    createdBy: record.createdBy ? String(record.createdBy) : undefined,
    createdAt: record.createdAt ? String(record.createdAt) : new Date().toISOString(),
    updatedBy: record.updatedBy ? String(record.updatedBy) : undefined,
    updatedAt: record.updatedAt ? String(record.updatedAt) : undefined,
    source: (record.source as ProduccionRegistro['source']) ?? (record.accessId ? 'import' : 'manual'),
    syncStatus: (record.syncStatus as ProduccionRegistro['syncStatus']) ?? 'synced',
    lastImportedAt: record.lastImportedAt ? String(record.lastImportedAt) : undefined,
    accessId: record.accessId ? String(record.accessId) : undefined,
  }),
});

export const litrosSchema = createSchema<LitrosCremaRegistro>({
  name: 'Litros de crema',
  fields: [
    { key: 'producto', label: 'Producto', type: 'string', required: true },
    { key: 'litros', label: 'Litros', type: 'number', required: true, min: 0 },
    { key: 'fecha', label: 'Fecha', type: 'date', required: true },
    { key: 'calculationDate', label: 'Fecha de cálculo', type: 'date' },
  ],
  transform: (record) => ({
    id: String(record.id ?? generateOperacionId('litros')),
    producto: String(record.producto ?? ''),
    litros: Number(record.litros ?? 0),
    fecha: String(record.fecha ?? ''),
    calculationDate: record.calculationDate ? String(record.calculationDate) : String(record.fecha ?? ''),
    responsable: record.responsable ? String(record.responsable) : undefined,
    createdBy: record.createdBy ? String(record.createdBy) : undefined,
    createdAt: record.createdAt ? String(record.createdAt) : new Date().toISOString(),
    updatedBy: record.updatedBy ? String(record.updatedBy) : undefined,
    updatedAt: record.updatedAt ? String(record.updatedAt) : undefined,
    source: (record.source as LitrosCremaRegistro['source']) ?? (record.accessId ? 'import' : 'manual'),
    syncStatus: (record.syncStatus as LitrosCremaRegistro['syncStatus']) ?? 'synced',
    lastImportedAt: record.lastImportedAt ? String(record.lastImportedAt) : undefined,
    accessId: record.accessId ? String(record.accessId) : undefined,
  }),
});

export const perdidasSchema = createSchema<PerdidaRegistro>({
  name: 'Pérdidas',
  fields: [
    { key: 'grupo', label: 'Grupo', type: 'string' },
    { key: 'producto', label: 'Producto', type: 'string' },
    { key: 'horma', label: 'Horma', type: 'number', min: 0 },
    { key: 'cantidad', label: 'Cantidad (kg)', type: 'number', required: true, min: 0 },
    { key: 'unidad', label: 'Unidad', type: 'string' },
    { key: 'fecha', label: 'Fecha', type: 'date', required: true },
    { key: 'calculationDate', label: 'Fecha de cálculo', type: 'date' },
  ],
  transform: (record) => ({
    id: String(record.id ?? generateOperacionId('perdida')),
    grupo: record.grupo ? String(record.grupo) : undefined,
    producto: record.producto ? String(record.producto) : undefined,
    horma: record.horma !== undefined ? Number(record.horma) : undefined,
    cantidad: Number(record.cantidad ?? 0),
    unidad: record.unidad ? String(record.unidad) : undefined,
    fecha: String(record.fecha ?? ''),
    calculationDate: record.calculationDate ? String(record.calculationDate) : String(record.fecha ?? ''),
    responsable: record.responsable ? String(record.responsable) : undefined,
    createdBy: record.createdBy ? String(record.createdBy) : undefined,
    createdAt: record.createdAt ? String(record.createdAt) : new Date().toISOString(),
    updatedBy: record.updatedBy ? String(record.updatedBy) : undefined,
    updatedAt: record.updatedAt ? String(record.updatedAt) : undefined,
    source: (record.source as PerdidaRegistro['source']) ?? (record.accessId ? 'import' : 'manual'),
    syncStatus: (record.syncStatus as PerdidaRegistro['syncStatus']) ?? 'synced',
    lastImportedAt: record.lastImportedAt ? String(record.lastImportedAt) : undefined,
    accessId: record.accessId ? String(record.accessId) : undefined,
  }),
});

export const sobrantesSchema = createSchema<SobranteRegistro>({
  name: 'Sobrantes',
  fields: [
    { key: 'grupo', label: 'Grupo', type: 'string' },
    { key: 'producto', label: 'Producto', type: 'string' },
    { key: 'horma', label: 'Horma', type: 'number', min: 0 },
    { key: 'cantidad', label: 'Cantidad (kg)', type: 'number', min: 0 },
    { key: 'unidad', label: 'Unidad', type: 'string' },
    { key: 'fecha', label: 'Fecha', type: 'date', required: true },
    { key: 'calculationDate', label: 'Fecha de cálculo', type: 'date' },
  ],
  transform: (record) => ({
    id: String(record.id ?? generateOperacionId('sobrante')),
    grupo: record.grupo ? String(record.grupo) : undefined,
    producto: record.producto ? String(record.producto) : undefined,
    horma: record.horma !== undefined ? Number(record.horma) : undefined,
    cantidad: record.cantidad !== undefined ? Number(record.cantidad) : undefined,
    unidad: record.unidad ? String(record.unidad) : undefined,
    fecha: String(record.fecha ?? ''),
    calculationDate: record.calculationDate ? String(record.calculationDate) : String(record.fecha ?? ''),
    responsable: record.responsable ? String(record.responsable) : undefined,
    createdBy: record.createdBy ? String(record.createdBy) : undefined,
    createdAt: record.createdAt ? String(record.createdAt) : new Date().toISOString(),
    updatedBy: record.updatedBy ? String(record.updatedBy) : undefined,
    updatedAt: record.updatedAt ? String(record.updatedAt) : undefined,
    source: (record.source as SobranteRegistro['source']) ?? (record.accessId ? 'import' : 'manual'),
    syncStatus: (record.syncStatus as SobranteRegistro['syncStatus']) ?? 'synced',
    lastImportedAt: record.lastImportedAt ? String(record.lastImportedAt) : undefined,
    accessId: record.accessId ? String(record.accessId) : undefined,
  }),
});
