import { createSchema } from './baseSchema';
import type {
  ConsumoRegistro,
  ProduccionRegistro,
  LitrosCremaRegistro,
  PerdidaRegistro,
  SobranteRegistro,
} from '../types';
import { generateOperacionId } from '../utils/id';

export const consumoSchema = createSchema<ConsumoRegistro>({
  name: 'Consumos',
  fields: [
    { key: 'producto', label: 'Producto', type: 'string', required: true, minLength: 2 },
    { key: 'insumo', label: 'Insumo', type: 'string', required: true },
    { key: 'cantidad', label: 'Cantidad', type: 'number', required: true, min: 0 },
    { key: 'unidad', label: 'Unidad', type: 'string', required: true, minLength: 1, maxLength: 10 },
    { key: 'tipoProd', label: 'Tipo de producto', type: 'string' },
    { key: 'fecha', label: 'Fecha', type: 'date', required: true },
    { key: 'calculationDate', label: 'Fecha de cálculo', type: 'date', required: true },
    { key: 'centro', label: 'Centro', type: 'string', required: true },
    { key: 'lote', label: 'Lote', type: 'string' },
    { key: 'turno', label: 'Turno', type: 'string' },
    {
      key: 'justificacion',
      label: 'Justificación',
      type: 'string',
      refine: (value) => {
        if (value && typeof value === 'string' && value.length > 0 && value.length < 5) {
          return 'La justificación debe contener al menos 5 caracteres.';
        }
        return null;
      },
    },
  ],
  transform: (record) => ({
    id: String(record.id ?? generateOperacionId('consumo')),
    producto: String(record.producto ?? ''),
    insumo: String(record.insumo ?? ''),
    cantidad: Number(record.cantidad ?? 0),
    unidad: String(record.unidad ?? ''),
    tipoProd: record.tipoProd ? String(record.tipoProd) : undefined,
    fecha: String(record.fecha ?? ''),
    calculationDate: String(record.calculationDate ?? record.fecha ?? ''),
    centro: String(record.centro ?? ''),
    lote: record.lote ? String(record.lote) : undefined,
    turno: record.turno ? String(record.turno) : undefined,
    responsable: record.responsable ? String(record.responsable) : undefined,
    createdBy: String(record.createdBy ?? 'import-bot'),
    createdAt: String(record.createdAt ?? new Date().toISOString()),
    updatedBy: record.updatedBy ? String(record.updatedBy) : undefined,
    updatedAt: record.updatedAt ? String(record.updatedAt) : undefined,
    source: (record.source as ConsumoRegistro['source']) ?? 'import',
    syncStatus: (record.syncStatus as ConsumoRegistro['syncStatus']) ?? 'stale',
    lastImportedAt: record.lastImportedAt ? String(record.lastImportedAt) : new Date().toISOString(),
    changeReason: record.changeReason ? String(record.changeReason) : undefined,
  }),
});

export const produccionSchema = createSchema<ProduccionRegistro>({
  name: 'Producciones',
  fields: [
    { key: 'orden', label: 'Orden', type: 'string', required: true },
    { key: 'producto', label: 'Producto', type: 'string', required: true },
    { key: 'lote', label: 'Lote', type: 'string', required: true },
    { key: 'turno', label: 'Turno', type: 'string', required: true },
    { key: 'cantidadProducida', label: 'Cantidad producida', type: 'number', required: true, min: 0 },
    { key: 'unidad', label: 'Unidad', type: 'string', required: true },
    { key: 'desperdicioPermitido', label: 'Desperdicio permitido', type: 'number', required: true, min: 0 },
    { key: 'fecha', label: 'Fecha', type: 'date', required: true },
    { key: 'calculationDate', label: 'Fecha de cálculo', type: 'date', required: true },
    { key: 'centro', label: 'Centro', type: 'string', required: true },
  ],
  transform: (record) => ({
    id: String(record.id ?? generateOperacionId('produccion')),
    orden: String(record.orden ?? ''),
    producto: String(record.producto ?? ''),
    lote: String(record.lote ?? ''),
    turno: String(record.turno ?? ''),
    cantidadProducida: Number(record.cantidadProducida ?? 0),
    unidad: String(record.unidad ?? ''),
    desperdicioPermitido: Number(record.desperdicioPermitido ?? 0),
    fecha: String(record.fecha ?? ''),
    calculationDate: String(record.calculationDate ?? record.fecha ?? ''),
    centro: String(record.centro ?? ''),
    responsable: record.responsable ? String(record.responsable) : undefined,
    createdBy: String(record.createdBy ?? 'import-bot'),
    createdAt: String(record.createdAt ?? new Date().toISOString()),
    updatedBy: record.updatedBy ? String(record.updatedBy) : undefined,
    updatedAt: record.updatedAt ? String(record.updatedAt) : undefined,
    source: (record.source as ProduccionRegistro['source']) ?? 'import',
    syncStatus: (record.syncStatus as ProduccionRegistro['syncStatus']) ?? 'stale',
    lastImportedAt: record.lastImportedAt ? String(record.lastImportedAt) : new Date().toISOString(),
    changeReason: record.changeReason ? String(record.changeReason) : undefined,
  }),
});

export const litrosSchema = createSchema<LitrosCremaRegistro>({
  name: 'Litros de crema',
  fields: [
    { key: 'lote', label: 'Lote', type: 'string', required: true },
    { key: 'turno', label: 'Turno', type: 'string', required: true },
    { key: 'litros', label: 'Litros', type: 'number', required: true, min: 0 },
    { key: 'temperatura', label: 'Temperatura', type: 'number', required: true },
    { key: 'solidosTotales', label: 'Sólidos totales', type: 'number', required: true },
    { key: 'fecha', label: 'Fecha', type: 'date', required: true },
    { key: 'calculationDate', label: 'Fecha de cálculo', type: 'date', required: true },
    { key: 'centro', label: 'Centro', type: 'string', required: true },
  ],
  transform: (record) => ({
    id: String(record.id ?? generateOperacionId('litros')),
    lote: String(record.lote ?? ''),
    turno: String(record.turno ?? ''),
    litros: Number(record.litros ?? 0),
    temperatura: Number(record.temperatura ?? 0),
    solidosTotales: Number(record.solidosTotales ?? 0),
    fecha: String(record.fecha ?? ''),
    calculationDate: String(record.calculationDate ?? record.fecha ?? ''),
    centro: String(record.centro ?? ''),
    responsable: record.responsable ? String(record.responsable) : undefined,
    createdBy: String(record.createdBy ?? 'import-bot'),
    createdAt: String(record.createdAt ?? new Date().toISOString()),
    updatedBy: record.updatedBy ? String(record.updatedBy) : undefined,
    updatedAt: record.updatedAt ? String(record.updatedAt) : undefined,
    source: (record.source as LitrosCremaRegistro['source']) ?? 'import',
    syncStatus: (record.syncStatus as LitrosCremaRegistro['syncStatus']) ?? 'stale',
    lastImportedAt: record.lastImportedAt ? String(record.lastImportedAt) : new Date().toISOString(),
    changeReason: record.changeReason ? String(record.changeReason) : undefined,
  }),
});

export const perdidasSchema = createSchema<PerdidaRegistro>({
  name: 'Pérdidas',
  fields: [
    { key: 'categoria', label: 'Categoría', type: 'enum', required: true, enumValues: ['merma', 'rechazo', 'devolucion'] },
    { key: 'lote', label: 'Lote', type: 'string' },
    { key: 'turno', label: 'Turno', type: 'string' },
    { key: 'cantidad', label: 'Cantidad', type: 'number', required: true, min: 0 },
    { key: 'unidad', label: 'Unidad', type: 'string', required: true },
    {
      key: 'justificacion',
      label: 'Justificación',
      type: 'string',
      required: true,
      minLength: 20,
    },
    { key: 'fecha', label: 'Fecha', type: 'date', required: true },
    { key: 'calculationDate', label: 'Fecha de cálculo', type: 'date', required: true },
    { key: 'centro', label: 'Centro', type: 'string', required: true },
  ],
  transform: (record) => ({
    id: String(record.id ?? generateOperacionId('perdida')),
    categoria: record.categoria as PerdidaRegistro['categoria'],
    lote: record.lote ? String(record.lote) : undefined,
    turno: record.turno ? String(record.turno) : undefined,
    cantidad: Number(record.cantidad ?? 0),
    unidad: String(record.unidad ?? ''),
    justificacion: String(record.justificacion ?? ''),
    fecha: String(record.fecha ?? ''),
    calculationDate: String(record.calculationDate ?? record.fecha ?? ''),
    centro: String(record.centro ?? ''),
    responsable: record.responsable ? String(record.responsable) : undefined,
    createdBy: String(record.createdBy ?? 'import-bot'),
    createdAt: String(record.createdAt ?? new Date().toISOString()),
    updatedBy: record.updatedBy ? String(record.updatedBy) : undefined,
    updatedAt: record.updatedAt ? String(record.updatedAt) : undefined,
    source: (record.source as PerdidaRegistro['source']) ?? 'import',
    syncStatus: (record.syncStatus as PerdidaRegistro['syncStatus']) ?? 'stale',
    lastImportedAt: record.lastImportedAt ? String(record.lastImportedAt) : new Date().toISOString(),
    changeReason: record.changeReason ? String(record.changeReason) : undefined,
  }),
});

export const sobrantesSchema = createSchema<SobranteRegistro>({
  name: 'Sobrantes',
  fields: [
    { key: 'lote', label: 'Lote', type: 'string', required: true },
    { key: 'turno', label: 'Turno', type: 'string', required: true },
    { key: 'cantidad', label: 'Cantidad', type: 'number', required: true, min: 0 },
    { key: 'unidad', label: 'Unidad', type: 'string', required: true },
    { key: 'destino', label: 'Destino', type: 'string', required: true },
    { key: 'fecha', label: 'Fecha', type: 'date', required: true },
    { key: 'calculationDate', label: 'Fecha de cálculo', type: 'date', required: true },
    { key: 'centro', label: 'Centro', type: 'string', required: true },
  ],
  transform: (record) => ({
    id: String(record.id ?? generateOperacionId('sobrante')),
    lote: String(record.lote ?? ''),
    turno: String(record.turno ?? ''),
    cantidad: Number(record.cantidad ?? 0),
    unidad: String(record.unidad ?? ''),
    destino: String(record.destino ?? ''),
    fecha: String(record.fecha ?? ''),
    calculationDate: String(record.calculationDate ?? record.fecha ?? ''),
    centro: String(record.centro ?? ''),
    responsable: record.responsable ? String(record.responsable) : undefined,
    createdBy: String(record.createdBy ?? 'import-bot'),
    createdAt: String(record.createdAt ?? new Date().toISOString()),
    updatedBy: record.updatedBy ? String(record.updatedBy) : undefined,
    updatedAt: record.updatedAt ? String(record.updatedAt) : undefined,
    source: (record.source as SobranteRegistro['source']) ?? 'import',
    syncStatus: (record.syncStatus as SobranteRegistro['syncStatus']) ?? 'stale',
    lastImportedAt: record.lastImportedAt ? String(record.lastImportedAt) : new Date().toISOString(),
    changeReason: record.changeReason ? String(record.changeReason) : undefined,
  }),
});
